syntax = "proto3";

option go_package = "./;generated";

package userservice;

import "generic/filter.proto";
import "generic/list.proto";

// Define the service for managing users.
service UserService {
  rpc GetUsers(GetUsersRequest) returns (GetUsersResponse);
  rpc GetUser(GetUserRequest) returns (User);
  rpc CreateUser(CreateUserRequest) returns (User);
  rpc UpdateUser(UpdateUserRequest) returns (User);
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
}

// Request for retrieving a list of users.
message GetUsersRequest {
  string search = 1; // Optional search term.
  generic.Pagination pagination = 2; // Pagination options.
  generic.Sort sort = 3; // Sorting options.
}

// Response for retrieving a list of users.
message GetUsersResponse {
  repeated User users = 1; // List of users.
  generic.PaginationInfo pagination_info = 2; // Pagination metadata.
}

// Request for retrieving a single user by ID.
message GetUserRequest {
  string id = 1; // The ID of the user.
}

// Request for creating a new user.
message CreateUserRequest {
  string username = 1; // The username of the new user.
  string email = 2; // The email of the new user.
  string password = 3; // The password of the new user.
}

// Request for updating an existing user.
message UpdateUserRequest {
  string id = 1; // The ID of the user to update.
  string username = 2; // The updated username.
  string email = 3; // The updated email.
  string password = 4; // The updated password.
}

// Request for deleting a user.
message DeleteUserRequest {
  string id = 1; // The ID of the user to delete.
}

// Response for deleting a user.
message DeleteUserResponse {
  bool success = 1; // Whether the deletion was successful.
}

// Message structure representing a single user.
message User {
  string id = 1; // The ID of the user.
  string username = 2; // The username of the user.
  string email = 3; // The email of the user.
  string password = 4; // The hashed password of the user.
}
